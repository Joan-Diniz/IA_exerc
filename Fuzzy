import numpy as np
import skfuzzy as fuzz
from skfuzzy import control as ctrl
import matplotlib.pyplot as plt

# Definição das variáveis fuzzy
# Erro entre o nível desejado e o nível atual
erro = ctrl.Antecedent(np.arange(-10, 11, 1), 'nivel')

# Derivada do erro velocidade com que o erro está mudando 
delta_erro = ctrl.Antecedent(np.arange(-5, 6, 1), 'velocidade')

# Ação de controle (abertura da válvula, de 0 a 100%)
controle = ctrl.Consequent(np.arange(0, 101, 1), 'controle')

# Definição das funções de pertinência
# Erro: Negativo, Zero, Positivo
erro['negativo'] = fuzz.trimf(erro.universe, [-10, -10, 0])
erro['zero'] = fuzz.trimf(erro.universe, [-5, 0, 5])
erro['positivo'] = fuzz.trimf(erro.universe, [0, 10, 10])

# Delta do erro: Diminuindo, Constante, Aumentando
delta_erro['diminuindo'] = fuzz.trimf(delta_erro.universe, [-5, -5, 0])
delta_erro['constante'] = fuzz.trimf(delta_erro.universe, [-2, 0, 2])
delta_erro['aumentando'] = fuzz.trimf(delta_erro.universe, [0, 5, 5])

# Controle: Fechar, Médio, Abrir
controle['fechar'] = fuzz.trimf(controle.universe, [0, 0, 50])
controle['medio'] = fuzz.trimf(controle.universe, [25, 50, 75])
controle['abrir'] = fuzz.trimf(controle.universe, [50, 100, 100])

fig, (ax0, ax1, ax2) = plt.subplots(nrows=3, figsize=(8, 9))

ax0.plot(erro.universe, fuzz.trimf(erro.universe, [-10, -10, 0]), 'b', linewidth=1.5, label='Negativo')
ax0.plot(erro.universe, fuzz.trimf(erro.universe, [-5, 0, 5]), 'g', linewidth=1.5, label='Zero')
ax0.plot(erro.universe, fuzz.trimf(erro.universe, [0, 10, 10]), 'r', linewidth=1.5, label='Positivo')
ax0.set_title('Nivel')
ax0.legend()

ax1.plot(delta_erro.universe, fuzz.trimf(delta_erro.universe, [-5, -5, 0]), 'b', linewidth=1.5, label='Diminuindo')
ax1.plot(delta_erro.universe, fuzz.trimf(delta_erro.universe, [-2, 0, 2]), 'g', linewidth=1.5, label='Constante')
ax1.plot(delta_erro.universe, fuzz.trimf(delta_erro.universe, [0, 5, 5]), 'r', linewidth=1.5, label='Aumentando')
ax1.set_title('Taxa de variação do nivel')
ax1.legend()

ax2.plot(controle.universe, fuzz.trimf(controle.universe, [0, 0, 50]), 'b', linewidth=1.5, label='Fechar')
ax2.plot(controle.universe, fuzz.trimf(controle.universe, [25, 50, 75]), 'g', linewidth=1.5, label='Médio')
ax2.plot(controle.universe, fuzz.trimf(controle.universe, [50, 100, 100]), 'r', linewidth=1.5, label='Abrir')
ax2.set_title('Ação de controle')
ax2.legend()

for ax in (ax0, ax1, ax2):
    ax.spines['top'].set_visible(False)
    ax.spines['right'].set_visible(False)
    ax.get_xaxis().tick_bottom()
    ax.get_yaxis().tick_left()

plt.tight_layout()

# Definição das regras fuzzy
regra1 = ctrl.Rule(erro['negativo'] & delta_erro['diminuindo'], controle['abrir'])
regra2 = ctrl.Rule(erro['negativo'] & delta_erro['constante'], controle['abrir'])
regra3 = ctrl.Rule(erro['negativo'] & delta_erro['aumentando'], controle['medio'])

regra4 = ctrl.Rule(erro['zero'] & delta_erro['constante'], controle['medio'])

regra5 = ctrl.Rule(erro['positivo'] & delta_erro['diminuindo'], controle['medio'])
regra6 = ctrl.Rule(erro['positivo'] & delta_erro['constante'], controle['fechar'])
regra7 = ctrl.Rule(erro['positivo'] & delta_erro['aumentando'], controle['fechar'])

# Criação do sistema de controle
sistema_controle = ctrl.ControlSystem([
    regra1, regra2, regra3,
    regra4,
    regra5, regra6, regra7
])

sistema_controle = ctrl.ControlSystem([regra1, regra2, regra3, regra4, regra5, regra6, regra7])
simulador = ctrl.ControlSystemSimulation(sistema_controle)

# Teste e visualização do resultado
simulador.input['nivel'] = -4
simulador.input['velocidade'] = 1
simulador.compute()

# Visualização do resultado da inferência
controle.view(sim=simulador)
plt.suptitle(f'Situação: Nivel = -4, Velocidae = +1\nAbertura da válvula: {simulador.output["controle"]:.2f}%')
plt.show()
